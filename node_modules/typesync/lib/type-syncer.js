"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTypeSyncer = void 0;
var types_1 = require("./types");
var util_1 = require("./util");
var semver_1 = require("semver");
/**
 * Creates a type syncer.
 *
 * @param packageJSONservice
 * @param typeDefinitionSource
 */
function createTypeSyncer(packageJSONService, typeDefinitionSource, packageSource, configService, globber) {
    var fetchPackageInfo = (0, util_1.memoizeAsync)(packageSource.fetch);
    return {
        sync: sync,
    };
    /**
     * Syncs typings in the specified package.json.
     */
    function sync(filePath, flags) {
        return __awaiter(this, void 0, void 0, function () {
            var dryRun, _a, file, allTypings, syncOpts, subPackages, syncedFiles;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dryRun = !!flags.dry;
                        return [4 /*yield*/, Promise.all([
                                packageJSONService.readPackageFile(filePath),
                                typeDefinitionSource.fetch(),
                                configService.readConfig(filePath, flags),
                            ])];
                    case 1:
                        _a = _b.sent(), file = _a[0], allTypings = _a[1], syncOpts = _a[2];
                        return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], (0, util_1.ensureWorkspacesArray)(file.packages), true), (0, util_1.ensureWorkspacesArray)(file.workspaces), true).map(globber.globPackageFiles))
                                .then(util_1.flatten)
                                .then(util_1.uniq)];
                    case 2:
                        subPackages = _b.sent();
                        return [4 /*yield*/, Promise.all(__spreadArray([
                                syncFile(filePath, file, allTypings, syncOpts, dryRun)
                            ], subPackages.map(function (p) {
                                return syncFile(p, null, allTypings, syncOpts, dryRun);
                            }), true))];
                    case 3:
                        syncedFiles = _b.sent();
                        return [2 /*return*/, {
                                syncedFiles: syncedFiles,
                            }];
                }
            });
        });
    }
    /**
     * Syncs a single file.
     *
     * @param filePath
     * @param file
     * @param allTypings
     * @param opts
     */
    function syncFile(filePath, file, allTypings, opts, dryRun) {
        return __awaiter(this, void 0, void 0, function () {
            var ignoreDeps, ignorePackages, packageFile, _a, allPackages, allPackageNames, newTypings, used, devDepsToAdd, devDeps, unused;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ignoreDeps = opts.ignoreDeps, ignorePackages = opts.ignorePackages;
                        _a = file;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, packageJSONService.readPackageFile(filePath)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        packageFile = _a;
                        allPackages = (0, util_1.flatten)((0, util_1.filterMap)(Object.values(types_1.IDependencySection), function (dep) {
                            if (ignoreDeps === null || ignoreDeps === void 0 ? void 0 : ignoreDeps.includes(dep)) {
                                return false;
                            }
                            var section = getDependenciesBySection(packageFile, dep);
                            return getPackagesFromSection(section, ignorePackages);
                        }));
                        allPackageNames = (0, util_1.uniq)(allPackages.map(function (p) { return p.name; }));
                        newTypings = filterNewTypings(allPackageNames, allTypings);
                        used = [];
                        return [4 /*yield*/, Promise.all(newTypings.map(function (t) { return __awaiter(_this, void 0, void 0, function () {
                                var typePackageInfoPromise, codePackageInfo, codePackage, closestMatchingCodeVersion, typePackageInfo, closestMatchingTypingsVersion, version, semverRangeSpecifier;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            typePackageInfoPromise = fetchPackageInfo((0, util_1.typed)(t.typingsName));
                                            return [4 /*yield*/, fetchPackageInfo(t.codePackageName)];
                                        case 1:
                                            codePackageInfo = _b.sent();
                                            codePackage = allPackages.find(function (p) { return p.name === t.codePackageName; });
                                            closestMatchingCodeVersion = getClosestMatchingVersion(codePackageInfo, codePackage.version);
                                            // If the closest matching version contains internal typings, don't include it.
                                            if (closestMatchingCodeVersion.containsInternalTypings) {
                                                return [2 /*return*/, {}];
                                            }
                                            return [4 /*yield*/, typePackageInfoPromise
                                                // Gets the closest matching typings version, or the newest one.
                                            ];
                                        case 2:
                                            typePackageInfo = _b.sent();
                                            closestMatchingTypingsVersion = getClosestMatchingVersion(typePackageInfo, codePackage.version);
                                            version = closestMatchingTypingsVersion.version;
                                            semverRangeSpecifier = getSemverRangeSpecifier(codePackage.version);
                                            used.push(t);
                                            return [2 /*return*/, (_a = {},
                                                    _a[(0, util_1.typed)(t.typingsName)] = semverRangeSpecifier + version,
                                                    _a)];
                                    }
                                });
                            }); })).then(util_1.mergeObjects)];
                    case 3:
                        devDepsToAdd = _b.sent();
                        devDeps = packageFile.devDependencies || /* istanbul ignore next */ {};
                        unused = getUnusedTypings(allPackageNames, devDeps, allTypings);
                        if (!!dryRun) return [3 /*break*/, 5];
                        return [4 /*yield*/, packageJSONService.writePackageFile(filePath, __assign(__assign({}, packageFile), { devDependencies: (0, util_1.orderObject)(__assign(__assign({}, devDepsToAdd), removeUnusedTypings(devDeps, unused))) }))];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [2 /*return*/, {
                            filePath: filePath,
                            newTypings: used,
                            removedTypings: unused,
                            package: packageFile,
                        }];
                }
            });
        });
    }
}
exports.createTypeSyncer = createTypeSyncer;
/**
 * Removes unused typings from the devDependencies section.
 *
 * @param allPackageNames
 * @param devDependencies
 */
function removeUnusedTypings(devDependencies, unusedTypings) {
    var result = {};
    var _loop_1 = function (packageName) {
        var version = devDependencies[packageName];
        if (unusedTypings.some(function (t) { return t.typingsPackageName === packageName; })) {
            return "continue";
        }
        result[packageName] = version;
    };
    for (var packageName in devDependencies) {
        _loop_1(packageName);
    }
    return result;
}
/**
 * Removes unused typings from the devDependencies section.
 *
 * @param allPackageNames
 * @param devDependencies
 */
function getUnusedTypings(allPackageNames, devDependencies, allTypings) {
    var result = [];
    var _loop_2 = function (packageName) {
        if (packageName.startsWith('@types/')) {
            var codePackageName_1 = (0, util_1.untyped)(packageName);
            // Make sure the corresponding code package is in `allPackages`.
            var hasCodePackageForTyping = allPackageNames.some(function (p) { return p === codePackageName_1; });
            if (!hasCodePackageForTyping) {
                var typingsNameForCodePackage_1 = getTypingsName(codePackageName_1);
                var typeDef = allTypings.find(function (t) { return t.typingsName === typingsNameForCodePackage_1; });
                if (typeDef && !typeDef.isGlobal) {
                    result.push(__assign({ codePackageName: codePackageName_1, typingsPackageName: packageName }, typeDef));
                }
            }
        }
    };
    for (var packageName in devDependencies) {
        _loop_2(packageName);
    }
    return result;
}
/**
 * Gets the closest matching package version info.
 *
 * @param packageInfo
 * @param version
 */
function getClosestMatchingVersion(packageInfo, version) {
    return (packageInfo.versions.find(function (v) { return (0, semver_1.satisfies)(v.version, version); }) ||
        packageInfo.versions[0]);
}
/**
 * Returns an array of new typings as well as the code package name that was matched to it.
 *
 * @param allPackageNames Used to filter the typings that are new.
 * @param allTypings All typings available
 */
function filterNewTypings(allPackageNames, allTypings) {
    var existingTypings = allPackageNames.filter(function (x) { return x.startsWith('@types/'); });
    return (0, util_1.filterMap)(allPackageNames, function (p) {
        var typingsName = getTypingsName(p);
        var typingsForPackage = allTypings.find(function (x) { return x.typingsName === typingsName; });
        if (!typingsForPackage) {
            // No typings available.
            return false;
        }
        var fullTypingsPackage = (0, util_1.typed)(typingsForPackage.typingsName);
        var alreadyHasTyping = existingTypings.some(function (t) { return t === fullTypingsPackage; });
        if (alreadyHasTyping) {
            return false;
        }
        return __assign(__assign({}, typingsForPackage), { codePackageName: p });
    });
}
/**
 * Gets the typings name for the specified package name.
 * For example, `koa` would be `koa`, but `@koa/router` would be `koa__router`.
 *
 * @param packageName the package name to generate the typings name for
 */
function getTypingsName(packageName) {
    var scopeInfo = getPackageScope(packageName);
    var typingsName = packageName;
    if (scopeInfo && scopeInfo[0] !== 'types') {
        typingsName = "".concat(scopeInfo[0], "__").concat(scopeInfo[1]);
    }
    return typingsName;
}
/**
 * If a package is scoped, returns the scope + package as a tuple, otherwise null.
 *
 * @param packageName Package name to check scope for.
 */
function getPackageScope(packageName) {
    var EXPR = /^\@([^\/]+)\/(.*)$/i;
    var matches = EXPR.exec(packageName);
    if (!matches) {
        return null;
    }
    return [matches[1], matches[2]];
}
/**
 * Get packages from a dependency section
 *
 * @param section
 * @param ignorePackages
 */
function getPackagesFromSection(section, ignorePackages) {
    return (0, util_1.filterMap)(Object.keys(section), function (name) {
        if (ignorePackages === null || ignorePackages === void 0 ? void 0 : ignorePackages.includes(name)) {
            return false;
        }
        return { name: name, version: section[name] };
    });
}
/**
 * Get dependencies from a package section
 *
 * @param file Package file
 * @param section Package section, eg: dev, peer
 */
function getDependenciesBySection(file, section) {
    var dependenciesSection = (function () {
        switch (section) {
            case types_1.IDependencySection.deps:
                return file.dependencies;
            case types_1.IDependencySection.dev:
                return file.devDependencies;
            case types_1.IDependencySection.optional:
                return file.optionalDependencies;
            case types_1.IDependencySection.peer:
                return file.peerDependencies;
        }
    })();
    return dependenciesSection !== null && dependenciesSection !== void 0 ? dependenciesSection : {};
}
var CARET = '^'.charCodeAt(0);
var TILDE = '~'.charCodeAt(0);
/**
 * Gets the semver range specifier (~, ^)
 * @param version
 */
function getSemverRangeSpecifier(version) {
    if (version.charCodeAt(0) === CARET) {
        return '^';
    }
    if (version.charCodeAt(0) === TILDE) {
        return '~';
    }
    return '';
}
//# sourceMappingURL=type-syncer.js.map